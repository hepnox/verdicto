generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_role {
  member
  admin
}

enum user_status {
  active
  inactive
  banned
}

model users {
  id         String    @id @default(uuid()) @db.Uuid
  email      String    @unique
  phone      String    @unique
  password   String
  role       user_role @default(member)
  status     user_status @default(active)
  avatar_url String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  reports   reports[]
  comments  report_comments[]
  reactions report_reactions[]
  files     files[]

  // Indexes
  @@index([created_at, updated_at])
  @@index([email, phone, password])
}

model reports {
  id            String   @id @default(uuid()) @db.Uuid
  title         String   @db.VarChar(255)
  description   String   @db.Text
  golocation_id String   @db.Uuid
  incident_at   DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user_id      String    @db.Uuid
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comments     report_comments[]
  reactions    report_reactions[]
  report_files report_files[]
  golocation   geolocations       @relation(fields: [golocation_id], references: [id])

  // Indexes
  @@index([user_id])
  @@index([created_at])
}

model report_comments {
  id         String   @id @default(uuid()) @db.Uuid
  content    String   @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id     String    @db.Uuid
  report_id   String    @db.Uuid

  // Relations
  user        users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  report      reports   @relation(fields: [report_id], references: [id], onDelete: Cascade)
  comment_files comment_files[]

  // Indexes
  @@index([user_id])
  @@index([report_id])
}

enum report_reaction_type {
  upvote
  downvote
}

model report_reactions {
  id         String               @id @default(uuid()) @db.Uuid
  type       report_reaction_type
  created_at DateTime             @default(now())

  // Relations
  user_id   String    @db.Uuid
  user      users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  report_id String    @db.Uuid
  report    reports   @relation(fields: [report_id], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([user_id, report_id])
  @@index([user_id])
  @@index([report_id])
}

model files {
  id         String   @id @default(uuid()) @db.Uuid
  filename   String
  path       String
  mime_type  String
  size       Int
  created_at DateTime @default(now())

  // Relations
  user_id       String    @db.Uuid
  user          users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  report_files  report_files[]
  comment_files comment_files[]

  // Indexes
  @@index([user_id])
}

model report_files {
  id        String    @id @default(uuid()) @db.Uuid
  report_id String    @db.Uuid
  report    reports   @relation(fields: [report_id], references: [id], onDelete: Cascade)
  file_id   String    @db.Uuid
  file      files     @relation(fields: [file_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([report_id])
  @@index([file_id])
}

model comment_files {
  id         String          @id @default(uuid()) @db.Uuid
  comment_id String          @db.Uuid
  comment    report_comments @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  file_id    String          @db.Uuid
  file       files           @relation(fields: [file_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([comment_id])
  @@index([file_id])
}

model geolocations {
  id         String    @id @default(uuid()) @db.Uuid
  latitude   Float
  longitude  Float
  created_at DateTime  @default(now())
  reports    reports[]

  // Indexes
  @@index([created_at])
}
